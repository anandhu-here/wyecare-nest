{
  "openapi": "3.0.0",
  "paths": {
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "Login successful" },
          "401": { "description": "Unauthorized" }
        },
        "summary": "Login with email and password",
        "tags": ["auth"]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [
          {
            "name": "invitationToken",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized - Invalid invitation" }
        },
        "summary": "Register a new user account",
        "tags": ["auth"]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": { "description": "Returns the user profile" },
          "401": { "description": "Unauthorized" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get the current user profile",
        "tags": ["auth"]
      }
    },
    "/auth/create-super-admin": {
      "post": {
        "operationId": "AuthController_createSuperAdmin",
        "parameters": [
          {
            "name": "secretKey",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "Super admin created successfully" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized - Invalid secret key" },
          "409": { "description": "Conflict - Super admin already exists" }
        },
        "summary": "Create the initial super admin (one-time operation)",
        "tags": ["auth"]
      }
    },
    "/auth/register-with-organization": {
      "post": {
        "operationId": "AuthController_registerWithOrganization",
        "parameters": [
          {
            "name": "invitationToken",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized - Invalid invitation" }
        },
        "summary": "Register a new user with organization",
        "tags": ["auth"]
      }
    },
    "/auth/invitations": {
      "post": {
        "operationId": "InvitationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateInvitationDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The invitation has been successfully created."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Role not found." },
          "409": { "description": "Conflict." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new invitation",
        "tags": ["auth/invitations"]
      },
      "get": {
        "operationId": "InvitationsController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Return all invitations." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all invitations",
        "tags": ["auth/invitations"]
      }
    },
    "/auth/invitations/validate/{token}": {
      "get": {
        "operationId": "InvitationsController_validateToken",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return the invitation." },
          "400": { "description": "Invitation expired or used." },
          "404": { "description": "Invitation not found." }
        },
        "summary": "Validate invitation token",
        "tags": ["auth/invitations"]
      }
    },
    "/auth/invitations/{id}": {
      "get": {
        "operationId": "InvitationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return the invitation." },
          "404": { "description": "Invitation not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get invitation by ID",
        "tags": ["auth/invitations"]
      }
    },
    "/auth/invitations/{id}/revoke": {
      "patch": {
        "operationId": "InvitationsController_revoke",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The invitation has been successfully revoked."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Invitation not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Revoke invitation by ID",
        "tags": ["auth/invitations"]
      }
    },
    "/auth/invitations/{id}/resend": {
      "patch": {
        "operationId": "InvitationsController_resend",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The invitation has been successfully resent."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Invitation not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Resend invitation by ID",
        "tags": ["auth/invitations"]
      }
    },
    "/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "The user has been successfully created." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "409": { "description": "Conflict - Email already exists." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new user",
        "tags": ["users"]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "organizationId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Return all users." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all users",
        "tags": ["users"]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return the user." },
          "404": { "description": "User not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get user by ID",
        "tags": ["users"]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "The user has been successfully updated." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User not found." },
          "409": { "description": "Conflict - Email already exists." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update user by ID",
        "tags": ["users"]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "The user has been successfully deleted." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete user by ID",
        "tags": ["users"]
      }
    },
    "/users/{id}/roles": {
      "post": {
        "operationId": "UsersController_assignRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssignRoleDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "The role has been successfully assigned." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Role not found." },
          "409": { "description": "Conflict - User already has this role." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Assign a role to a user",
        "tags": ["users"]
      }
    },
    "/users/{id}/roles/{roleId}": {
      "delete": {
        "operationId": "UsersController_removeRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "The role has been successfully removed." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Role not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a role from a user",
        "tags": ["users"]
      }
    },
    "/users/{id}/departments": {
      "post": {
        "operationId": "UsersController_updateDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDepartmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The department has been successfully assigned or updated."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Department not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Assign or update a department for a user",
        "tags": ["users"]
      }
    },
    "/users/{id}/departments/{departmentId}": {
      "delete": {
        "operationId": "UsersController_removeDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The department has been successfully removed."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Department not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a department from a user",
        "tags": ["users"]
      }
    },
    "/users/{id}/permissions": {
      "get": {
        "operationId": "UsersController_getUserPermissions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return user permissions." },
          "404": { "description": "User not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get user permissions",
        "tags": ["users"]
      },
      "post": {
        "operationId": "UsersController_assignPermission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserPermissionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The permission has been successfully assigned."
          },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Permission not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Assign a permission to a user",
        "tags": ["users"]
      }
    },
    "/users/{id}/permissions/{permissionId}": {
      "delete": {
        "operationId": "UsersController_removePermission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "permissionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The permission has been successfully removed."
          },
          "403": { "description": "Forbidden." },
          "404": { "description": "User or Permission not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a permission from a user",
        "tags": ["users"]
      }
    },
    "/organizations": {
      "post": {
        "operationId": "OrganizationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateOrganizationDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organization has been successfully created."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new organization",
        "tags": ["organizations"]
      },
      "get": {
        "operationId": "OrganizationsController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "HOSPITAL",
                "CARE_HOME",
                "STAFF_PROVIDER",
                "SOFTWARE_COMPANY",
                "MANUFACTURING",
                "EDUCATION",
                "RETAIL",
                "LOGISTICS",
                "CONSTRUCTION",
                "FINANCIAL",
                "HOSPITALITY",
                "HEALTHCARE",
                "OTHER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": { "200": { "description": "Return all organizations." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all organizations",
        "tags": ["organizations"]
      }
    },
    "/organizations/{id}": {
      "get": {
        "operationId": "OrganizationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return the organization." },
          "404": { "description": "Organization not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get organization by ID",
        "tags": ["organizations"]
      },
      "patch": {
        "operationId": "OrganizationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateOrganizationDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The organization has been successfully updated."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Organization not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update organization by ID",
        "tags": ["organizations"]
      },
      "delete": {
        "operationId": "OrganizationsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": {
            "description": "The organization has been successfully deleted."
          },
          "400": {
            "description": "Bad Request - Cannot delete organization with dependencies."
          },
          "403": { "description": "Forbidden." },
          "404": { "description": "Organization not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete organization by ID",
        "tags": ["organizations"]
      }
    },
    "/organizations/{id}/departments": {
      "post": {
        "operationId": "OrganizationsController_createDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDepartmentDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The department has been successfully created."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Organization not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new department in organization",
        "tags": ["organizations"]
      },
      "get": {
        "operationId": "OrganizationsController_getDepartments",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return all departments." },
          "404": { "description": "Organization not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get all departments in organization",
        "tags": ["organizations"]
      }
    },
    "/roles": {
      "post": {
        "operationId": "RolesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRolesDto" }
            }
          }
        },
        "responses": {
          "201": { "description": "The role has been successfully created." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "409": { "description": "Conflict - Role already exists." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new role",
        "tags": ["roles"]
      },
      "get": {
        "operationId": "RolesController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "isSystemRole",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "organizationId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sector",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "HOSPITAL",
                "CARE_HOME",
                "STAFF_PROVIDER",
                "SOFTWARE_COMPANY",
                "MANUFACTURING",
                "EDUCATION",
                "RETAIL",
                "LOGISTICS",
                "CONSTRUCTION",
                "FINANCIAL",
                "HOSPITALITY",
                "HEALTHCARE",
                "OTHER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": { "200": { "description": "Return all roles." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all roles",
        "tags": ["roles"]
      }
    },
    "/roles/permissions": {
      "get": {
        "operationId": "RolesController_findAllPermissions",
        "parameters": [],
        "responses": { "200": { "description": "Return all permissions." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all permissions",
        "tags": ["roles"]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "RolesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Return the role." },
          "404": { "description": "Role not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get role by ID",
        "tags": ["roles"]
      },
      "patch": {
        "operationId": "RolesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateRolesDto" }
            }
          }
        },
        "responses": {
          "200": { "description": "The role has been successfully updated." },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Role not found." },
          "409": { "description": "Conflict - Role already exists." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update role by ID",
        "tags": ["roles"]
      },
      "delete": {
        "operationId": "RolesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "The role has been successfully deleted." },
          "400": {
            "description": "Bad Request - Cannot delete role with assigned users or system roles."
          },
          "403": { "description": "Forbidden." },
          "404": { "description": "Role not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete role by ID",
        "tags": ["roles"]
      }
    },
    "/roles/{id}/permissions": {
      "post": {
        "operationId": "RolesController_assignPermission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssignPermissionDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The permission has been successfully assigned."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Role or Permission not found." },
          "409": {
            "description": "Conflict - Role already has this permission."
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Assign a permission to a role",
        "tags": ["roles"]
      }
    },
    "/roles/{id}/permissions/{permissionId}": {
      "delete": {
        "operationId": "RolesController_removePermission",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "permissionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The permission has been successfully removed."
          },
          "400": { "description": "Bad Request." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Role or Permission not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Remove a permission from a role",
        "tags": ["roles"]
      }
    },
    "/shift-types": {
      "post": {
        "operationId": "ShiftTypesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateShiftTypeDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["ShiftTypes"]
      },
      "get": {
        "operationId": "ShiftTypesController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftTypes"]
      }
    },
    "/shift-types/{id}": {
      "get": {
        "operationId": "ShiftTypesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftTypes"]
      },
      "patch": {
        "operationId": "ShiftTypesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateShiftTypeDto" }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftTypes"]
      },
      "delete": {
        "operationId": "ShiftTypesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftTypes"]
      }
    },
    "/shift-types/{id}/clone": {
      "post": {
        "operationId": "ShiftTypesController_cloneShiftType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "201": { "description": "" } },
        "tags": ["ShiftTypes"]
      }
    },
    "/shift-types/organization/{organizationId}": {
      "get": {
        "operationId": "ShiftTypesController_findByOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftTypes"]
      }
    },
    "/shift-schedules": {
      "post": {
        "operationId": "ShiftSchedulesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShiftScheduleDto"
              }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["ShiftSchedules"]
      },
      "get": {
        "operationId": "ShiftSchedulesController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-schedules/bulk": {
      "post": {
        "operationId": "ShiftSchedulesController_bulkCreate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateShiftScheduleDto"
              }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-schedules/{id}": {
      "get": {
        "operationId": "ShiftSchedulesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      },
      "patch": {
        "operationId": "ShiftSchedulesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShiftScheduleDto"
              }
            }
          }
        },
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      },
      "delete": {
        "operationId": "ShiftSchedulesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-schedules/staff/{staffProfileId}": {
      "get": {
        "operationId": "ShiftSchedulesController_findByStaff",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-schedules/department/{departmentId}": {
      "get": {
        "operationId": "ShiftSchedulesController_findByDepartment",
        "parameters": [
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-schedules/swap": {
      "post": {
        "operationId": "ShiftSchedulesController_swapShifts",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SwapShiftDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["ShiftSchedules"]
      }
    },
    "/shift-attendances": {
      "post": {
        "operationId": "ShiftAttendancesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShiftAttendanceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The shift attendance has been successfully created.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Attendance already exists for this shift."
          },
          "403": { "description": "Forbidden - Insufficient permissions." }
        },
        "summary": "Create a new shift attendance record",
        "tags": ["Shift Attendances"]
      },
      "get": {
        "operationId": "ShiftAttendancesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of shift attendance records retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ShiftAttendance" }
                }
              }
            }
          },
          "403": { "description": "Forbidden - Insufficient permissions." }
        },
        "summary": "Get all shift attendance records with optional filtering",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-attendances/{id}": {
      "get": {
        "operationId": "ShiftAttendancesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the shift attendance record",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The shift attendance record has been found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift attendance record not found." }
        },
        "summary": "Get a specific shift attendance record by ID",
        "tags": ["Shift Attendances"]
      },
      "patch": {
        "operationId": "ShiftAttendancesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the shift attendance record to update",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShiftAttendanceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The shift attendance record has been successfully updated.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift attendance record not found." }
        },
        "summary": "Update a shift attendance record",
        "tags": ["Shift Attendances"]
      },
      "delete": {
        "operationId": "ShiftAttendancesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the shift attendance record to delete",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The shift attendance record has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift attendance record not found." }
        },
        "summary": "Delete a shift attendance record",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-attendances/{id}/approve": {
      "post": {
        "operationId": "ShiftAttendancesController_approve",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the shift attendance record to approve",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approvedById": {
                    "type": "string",
                    "description": "ID of the user approving the attendance"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Optional approval notes",
                    "nullable": true
                  }
                },
                "required": ["approvedById"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The shift attendance record has been successfully approved.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Attendance record is already approved."
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift attendance record not found." }
        },
        "summary": "Approve a shift attendance record",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-attendances/by-shift/{shiftScheduleId}": {
      "get": {
        "operationId": "ShiftAttendancesController_findByShiftSchedule",
        "parameters": [
          {
            "name": "shiftScheduleId",
            "required": true,
            "in": "path",
            "description": "The ID of the shift schedule",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The shift attendance record has been found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "403": { "description": "Forbidden - Insufficient permissions." }
        },
        "summary": "Get attendance record for a specific shift",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-attendances/clock-in/{shiftScheduleId}": {
      "post": {
        "operationId": "ShiftAttendancesController_clockIn",
        "parameters": [
          {
            "name": "shiftScheduleId",
            "required": true,
            "in": "path",
            "description": "The ID of the shift schedule to clock in for",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully clocked in for the shift.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Already clocked in for this shift."
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift schedule not found." }
        },
        "summary": "Clock in for a shift",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-attendances/clock-out/{shiftScheduleId}": {
      "post": {
        "operationId": "ShiftAttendancesController_clockOut",
        "parameters": [
          {
            "name": "shiftScheduleId",
            "required": true,
            "in": "path",
            "description": "The ID of the shift schedule to clock out from",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully clocked out from the shift.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ShiftAttendance" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Already clocked out or not clocked in for this shift."
          },
          "403": { "description": "Forbidden - Insufficient permissions." },
          "404": { "description": "Shift attendance record not found." }
        },
        "summary": "Clock out for a shift",
        "tags": ["Shift Attendances"]
      }
    },
    "/shift-reports/staff/{staffProfileId}": {
      "get": {
        "operationId": "ShiftReportsController_getStaffHoursReport",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftReports"]
      }
    },
    "/shift-reports/department/{departmentId}": {
      "get": {
        "operationId": "ShiftReportsController_getDepartmentHoursReport",
        "parameters": [
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftReports"]
      }
    },
    "/shift-reports/organization/{organizationId}/coverage": {
      "get": {
        "operationId": "ShiftReportsController_getOrganizationCoverageReport",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftReports"]
      }
    },
    "/shift-reports/organization/{organizationId}/overtime": {
      "get": {
        "operationId": "ShiftReportsController_getOvertimeReport",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["ShiftReports"]
      }
    },
    "/api/payment-rules": {
      "post": {
        "description": "Creates a new payment rule that defines payment rates for a specific role and shift type combination",
        "operationId": "PaymentRulesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreatePaymentRuleDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The payment rule has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new payment rule",
        "tags": ["Payment Rules"]
      },
      "get": {
        "description": "Retrieves all payment rules with optional filtering",
        "operationId": "PaymentRulesController_findAll",
        "parameters": [
          {
            "name": "shiftTypeId",
            "required": false,
            "in": "query",
            "description": "Filter by shift type ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": false,
            "in": "query",
            "description": "Filter by role ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7",
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "required": false,
            "in": "query",
            "description": "Filter by organization ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa8",
              "type": "string"
            }
          },
          {
            "name": "paymentType",
            "required": false,
            "in": "query",
            "description": "Filter by payment type",
            "schema": {
              "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Filter by effective date - returns rules effective at the specified date",
            "schema": {
              "format": "date-time",
              "example": "2025-06-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter active rules only (rules with no end date or end date in the future)",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip for pagination",
            "schema": { "minimum": 0, "example": 0, "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take for pagination",
            "schema": { "minimum": 1, "example": 10, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all payment rules that match the query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRuleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find all payment rules",
        "tags": ["Payment Rules"]
      }
    },
    "/api/payment-rules/{id}": {
      "get": {
        "description": "Retrieves a specific payment rule by its unique identifier",
        "operationId": "PaymentRulesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The payment rule ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payment rule with the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRuleResponseDto"
                }
              }
            }
          },
          "404": { "description": "Payment rule not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find one payment rule by ID",
        "tags": ["Payment Rules"]
      },
      "patch": {
        "description": "Updates an existing payment rule with the provided data",
        "operationId": "PaymentRulesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The payment rule ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePaymentRuleDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The payment rule has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRuleResponseDto"
                }
              }
            }
          },
          "404": { "description": "Payment rule not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update a payment rule",
        "tags": ["Payment Rules"]
      },
      "delete": {
        "description": "Removes a payment rule from the system",
        "operationId": "PaymentRulesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The payment rule ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment rule has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRuleResponseDto"
                }
              }
            }
          },
          "404": { "description": "Payment rule not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete a payment rule",
        "tags": ["Payment Rules"]
      }
    },
    "/api/payment-rules/organization/{organizationId}": {
      "get": {
        "description": "Retrieves all payment rules for a specific organization",
        "operationId": "PaymentRulesController_findByOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "description": "The organization ID",
            "schema": { "type": "string" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "paymentType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "shiftTypeId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all payment rules for the given organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRuleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find payment rules by organization",
        "tags": ["Payment Rules"]
      }
    },
    "/api/payment-rules/role/{roleId}": {
      "get": {
        "description": "Retrieves all payment rules for a specific role",
        "operationId": "PaymentRulesController_findByRole",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "description": "The role ID",
            "schema": { "type": "string" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "paymentType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "shiftTypeId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all payment rules for the given role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRuleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find payment rules by role",
        "tags": ["Payment Rules"]
      }
    },
    "/api/payment-rules/shift-type/{shiftTypeId}": {
      "get": {
        "description": "Retrieves all payment rules for a specific shift type",
        "operationId": "PaymentRulesController_findByShiftType",
        "parameters": [
          {
            "name": "shiftTypeId",
            "required": true,
            "in": "path",
            "description": "The shift type ID",
            "schema": { "type": "string" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "schema": { "format": "date-time", "type": "string" }
          },
          {
            "name": "paymentType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "roleId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all payment rules for the given shift type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRuleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find payment rules by shift type",
        "tags": ["Payment Rules"]
      }
    },
    "/api/shift-type-premiums": {
      "post": {
        "description": "Creates a premium payment rule for a specific shift type and compensation rate",
        "operationId": "ShiftTypePremiumsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShiftTypePremiumDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The shift premium has been successfully created.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new shift type premium",
        "tags": ["Shift Type Premiums"]
      },
      "get": {
        "description": "Retrieves all shift type premiums with optional filtering",
        "operationId": "ShiftTypePremiumsController_findAll",
        "parameters": [
          {
            "name": "shiftTypeId",
            "required": false,
            "in": "query",
            "description": "Filter by shift type ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "type": "string"
            }
          },
          {
            "name": "compensationRateId",
            "required": false,
            "in": "query",
            "description": "Filter by compensation rate ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7",
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Filter by effective date - returns premiums effective at the specified date",
            "schema": {
              "format": "date-time",
              "example": "2025-06-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter active premiums only (premiums with no end date or end date in the future)",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip for pagination",
            "schema": { "minimum": 0, "example": 0, "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take for pagination",
            "schema": { "minimum": 1, "example": 10, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all shift premiums that match the query.",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find all shift premiums",
        "tags": ["Shift Type Premiums"]
      }
    },
    "/api/shift-type-premiums/{id}": {
      "get": {
        "description": "Retrieves a specific shift premium by its unique identifier",
        "operationId": "ShiftTypePremiumsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The shift premium ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the shift premium with the given ID.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Shift premium not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find one shift premium by ID",
        "tags": ["Shift Type Premiums"]
      },
      "patch": {
        "description": "Updates an existing shift premium with the provided data",
        "operationId": "ShiftTypePremiumsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The shift premium ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShiftTypePremiumDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The shift premium has been successfully updated.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Shift premium not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update a shift premium",
        "tags": ["Shift Type Premiums"]
      },
      "delete": {
        "description": "Removes a shift premium from the system",
        "operationId": "ShiftTypePremiumsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The shift premium ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The shift premium has been successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Shift premium not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete a shift premium",
        "tags": ["Shift Type Premiums"]
      }
    },
    "/api/shift-type-premiums/applicable/{staffProfileId}/{departmentId}/{shiftTypeId}": {
      "get": {
        "description": "Finds all applicable premiums for a staff member working a specific shift type in a department",
        "operationId": "ShiftTypePremiumsController_findApplicablePremiums",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": true,
            "in": "path",
            "description": "The staff profile ID",
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "description": "The department ID",
            "schema": { "type": "string" }
          },
          {
            "name": "shiftTypeId",
            "required": true,
            "in": "path",
            "description": "The shift type ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all applicable shift premiums.",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find applicable premiums",
        "tags": ["Shift Type Premiums"]
      }
    },
    "/api/staff-compensation-rates": {
      "post": {
        "description": "Creates a new base compensation rate for a staff member in a specific department",
        "operationId": "StaffCompensationRatesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaffCompensationRateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The compensation rate has been successfully created.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new staff compensation rate",
        "tags": ["Staff Compensation Rates"]
      },
      "get": {
        "description": "Retrieves all compensation rates with optional filtering",
        "operationId": "StaffCompensationRatesController_findAll",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": false,
            "in": "query",
            "description": "Filter by staff profile ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7",
              "type": "string"
            }
          },
          {
            "name": "paymentType",
            "required": false,
            "in": "query",
            "description": "Filter by payment type",
            "schema": {
              "enum": ["HOURLY", "WEEKLY", "MONTHLY"],
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Filter by effective date - returns rates effective at the specified date",
            "schema": {
              "format": "date-time",
              "example": "2025-06-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter active rates only (rates with no end date or end date in the future)",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "includePremiums",
            "required": false,
            "in": "query",
            "description": "Include shift type premiums in the response",
            "schema": { "example": true, "type": "boolean" }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip for pagination",
            "schema": { "minimum": 0, "example": 0, "type": "number" }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take for pagination",
            "schema": { "minimum": 1, "example": 10, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all compensation rates that match the query.",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find all compensation rates",
        "tags": ["Staff Compensation Rates"]
      }
    },
    "/api/staff-compensation-rates/{id}": {
      "get": {
        "description": "Retrieves a specific compensation rate by its unique identifier",
        "operationId": "StaffCompensationRatesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The compensation rate ID",
            "schema": { "type": "string" }
          },
          {
            "name": "includePremiums",
            "required": false,
            "in": "query",
            "description": "Include shift premiums in the response",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the compensation rate with the given ID.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Compensation rate not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find one compensation rate by ID",
        "tags": ["Staff Compensation Rates"]
      },
      "patch": {
        "description": "Updates an existing compensation rate with the provided data",
        "operationId": "StaffCompensationRatesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The compensation rate ID",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaffCompensationRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The compensation rate has been successfully updated.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Compensation rate not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update a compensation rate",
        "tags": ["Staff Compensation Rates"]
      },
      "delete": {
        "description": "Removes a compensation rate from the system",
        "operationId": "StaffCompensationRatesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The compensation rate ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The compensation rate has been successfully deleted.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "Compensation rate not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete a compensation rate",
        "tags": ["Staff Compensation Rates"]
      }
    },
    "/api/staff-compensation-rates/staff/{staffProfileId}/department/{departmentId}": {
      "get": {
        "description": "Returns the currently effective compensation rate for a specific staff member in a specific department",
        "operationId": "StaffCompensationRatesController_findCurrentRate",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": true,
            "in": "path",
            "description": "The staff profile ID",
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "description": "The department ID",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current effective compensation rate.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": { "description": "No active compensation rate found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Find current compensation rate for a staff member in a department",
        "tags": ["Staff Compensation Rates"]
      }
    },
    "/api/staff-compensation-rates/calculate-pay": {
      "get": {
        "description": "Calculates the payment for a staff member working a specific shift type for a given number of hours",
        "operationId": "StaffCompensationRatesController_calculateShiftPay",
        "parameters": [
          {
            "name": "staffProfileId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "shiftTypeId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "hoursWorked",
            "required": true,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the calculated payment details.",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          },
          "404": {
            "description": "Staff, department, or shift type not found."
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Calculate pay for a shift",
        "tags": ["Staff Compensation Rates"]
      }
    }
  },
  "info": {
    "title": "Multi-Sector Management API",
    "description": "API for managing organizations across multiple sectors",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    { "name": "auth", "description": "Authentication endpoints" },
    { "name": "users", "description": "User management endpoints" },
    {
      "name": "organizations",
      "description": "Organization management endpoints"
    },
    { "name": "roles", "description": "Role management endpoints" }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "example": "admin@example.com" },
          "password": { "type": "string", "example": "password123" }
        },
        "required": ["email", "password"]
      },
      "UserDepartmentDto": {
        "type": "object",
        "properties": {
          "departmentId": { "type": "string", "description": "Department ID" },
          "position": {
            "type": "string",
            "description": "User position in department"
          },
          "isHead": {
            "type": "boolean",
            "description": "Whether user is head of department"
          }
        },
        "required": ["departmentId"]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "description": "User email" },
          "password": { "type": "string", "description": "User password" },
          "firstName": { "type": "string", "description": "User first name" },
          "lastName": { "type": "string", "description": "User last name" },
          "isActive": {
            "type": "boolean",
            "description": "User active status",
            "default": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "roles": {
            "description": "Role IDs to assign",
            "type": "array",
            "items": { "type": "string" }
          },
          "departments": {
            "description": "Departments to assign",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserDepartmentDto" }
          },
          "sectorProfile": {
            "type": "object",
            "description": "Sector-specific user profile data"
          },
          "address": { "type": "object", "description": "User address" }
        },
        "required": ["email", "password", "firstName", "lastName"]
      },
      "CreateInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the invitee"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID (if inviting to specific org)"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID to assign to the user upon acceptance"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date for the invitation"
          },
          "message": {
            "type": "string",
            "description": "Optional message to include with the invitation"
          }
        },
        "required": ["email", "organizationId"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "description": "User email" },
          "password": { "type": "string", "description": "User password" },
          "firstName": { "type": "string", "description": "User first name" },
          "lastName": { "type": "string", "description": "User last name" },
          "isActive": {
            "type": "boolean",
            "description": "User active status",
            "default": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "roles": {
            "description": "Role IDs to assign",
            "type": "array",
            "items": { "type": "string" }
          },
          "departments": {
            "description": "Departments to assign",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserDepartmentDto" }
          },
          "sectorProfile": {
            "type": "object",
            "description": "Sector-specific user profile data"
          },
          "address": { "type": "object", "description": "User address" }
        }
      },
      "AssignRoleDto": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Role ID to assign to the user"
          },
          "validUntil": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date for the role (temporary role)"
          }
        },
        "required": ["roleId"]
      },
      "UpdateUserDepartmentDto": {
        "type": "object",
        "properties": {
          "departmentId": { "type": "string", "description": "Department ID" },
          "position": {
            "type": "string",
            "description": "User position in department"
          },
          "isHead": {
            "type": "boolean",
            "description": "Whether user is head of department"
          }
        },
        "required": ["departmentId"]
      },
      "AssignUserPermissionDto": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "Permission ID to assign to the user"
          },
          "conditions": {
            "type": "object",
            "description": "Conditions for the permission (CASL conditions)"
          },
          "validUntil": {
            "format": "date-time",
            "type": "string",
            "description": "Expiration date for the permission (temporary access)"
          }
        },
        "required": ["permissionId"]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "description": "Street address" },
          "city": { "type": "string", "description": "City" },
          "state": { "type": "string", "description": "State/Province" },
          "zipCode": { "type": "string", "description": "Zip/Postal Code" },
          "country": { "type": "string", "description": "Country" },
          "countryCode": { "type": "string", "description": "Country Code" }
        },
        "required": ["street", "city", "state", "zipCode", "country"]
      },
      "CreateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Organization name" },
          "category": {
            "type": "string",
            "description": "Organization category",
            "enum": [
              "HOSPITAL",
              "CARE_HOME",
              "STAFF_PROVIDER",
              "SOFTWARE_COMPANY",
              "MANUFACTURING",
              "EDUCATION",
              "RETAIL",
              "LOGISTICS",
              "CONSTRUCTION",
              "FINANCIAL",
              "HOSPITALITY",
              "HEALTHCARE",
              "OTHER"
            ],
            "example": "HOSPITAL"
          },
          "description": {
            "type": "string",
            "description": "Organization description"
          },
          "email": { "type": "string", "description": "Organization email" },
          "phone": { "type": "string", "description": "Organization phone" },
          "websiteUrl": {
            "type": "string",
            "description": "Organization website URL"
          },
          "logoUrl": {
            "type": "string",
            "description": "Organization logo URL"
          },
          "sectorConfig": {
            "type": "object",
            "description": "Sector-specific configuration"
          },
          "address": {
            "description": "Department address",
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }]
          }
        },
        "required": ["name", "category"]
      },
      "UpdateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Organization name" },
          "category": {
            "type": "string",
            "description": "Organization category",
            "enum": [
              "HOSPITAL",
              "CARE_HOME",
              "STAFF_PROVIDER",
              "SOFTWARE_COMPANY",
              "MANUFACTURING",
              "EDUCATION",
              "RETAIL",
              "LOGISTICS",
              "CONSTRUCTION",
              "FINANCIAL",
              "HOSPITALITY",
              "HEALTHCARE",
              "OTHER"
            ],
            "example": "HOSPITAL"
          },
          "description": {
            "type": "string",
            "description": "Organization description"
          },
          "email": { "type": "string", "description": "Organization email" },
          "phone": { "type": "string", "description": "Organization phone" },
          "websiteUrl": {
            "type": "string",
            "description": "Organization website URL"
          },
          "logoUrl": {
            "type": "string",
            "description": "Organization logo URL"
          },
          "sectorConfig": {
            "type": "object",
            "description": "Sector-specific configuration"
          },
          "address": {
            "description": "Organization address",
            "allOf": [{ "$ref": "#/components/schemas/AddressDto" }]
          }
        }
      },
      "CreateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Department name" },
          "description": {
            "type": "string",
            "description": "Department description"
          },
          "parentId": {
            "type": "string",
            "description": "Parent department ID"
          }
        },
        "required": ["name"]
      },
      "CreateRolesDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Role name" },
          "description": {
            "type": "string",
            "description": "Role description"
          },
          "isSystemRole": {
            "type": "boolean",
            "description": "Is this a system-wide role",
            "default": false
          },
          "sector": {
            "type": "string",
            "description": "Sector this role applies to (null means cross-sector)",
            "enum": [
              "HOSPITAL",
              "CARE_HOME",
              "STAFF_PROVIDER",
              "SOFTWARE_COMPANY",
              "MANUFACTURING",
              "EDUCATION",
              "RETAIL",
              "LOGISTICS",
              "CONSTRUCTION",
              "FINANCIAL",
              "HOSPITALITY",
              "HEALTHCARE",
              "OTHER"
            ]
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID (null for system roles)"
          },
          "permissions": {
            "description": "Permission IDs to assign",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["name"]
      },
      "UpdateRolesDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Role name" },
          "description": {
            "type": "string",
            "description": "Role description"
          },
          "isSystemRole": {
            "type": "boolean",
            "description": "Is this a system-wide role",
            "default": false
          },
          "sector": {
            "type": "string",
            "description": "Sector this role applies to (null means cross-sector)",
            "enum": [
              "HOSPITAL",
              "CARE_HOME",
              "STAFF_PROVIDER",
              "SOFTWARE_COMPANY",
              "MANUFACTURING",
              "EDUCATION",
              "RETAIL",
              "LOGISTICS",
              "CONSTRUCTION",
              "FINANCIAL",
              "HOSPITALITY",
              "HEALTHCARE",
              "OTHER"
            ]
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID (null for system roles)"
          },
          "permissions": {
            "description": "Permission IDs to assign",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "AssignPermissionDto": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "Permission ID to assign"
          },
          "conditions": {
            "type": "object",
            "description": "Conditions for this permission (CASL conditions as JSON)",
            "example": { "organizationId": { "$eq": "$user.organizationId" } }
          }
        },
        "required": ["permissionId"]
      },
      "CreateShiftTypeDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Shift type name" },
          "startTime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift type description"
          },
          "endTime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift type description"
          },
          "isOvernight": {
            "type": "boolean",
            "description": "Whether the shift type is overnight",
            "default": false
          },
          "hoursCount": {
            "type": "number",
            "description": "Shift type hours count"
          },
          "basePayMultiplier": {
            "type": "number",
            "description": "Shift type base pay multiplier"
          },
          "description": {
            "type": "string",
            "description": "Shift type description"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          }
        },
        "required": ["name", "endTime", "hoursCount", "organizationId"]
      },
      "UpdateShiftTypeDto": { "type": "object", "properties": {} },
      "CreateShiftScheduleDto": { "type": "object", "properties": {} },
      "BulkCreateShiftScheduleDto": {
        "type": "object",
        "properties": {
          "shifts": {
            "description": "Array of shift schedules to be created",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateShiftScheduleDto" }
          }
        },
        "required": ["shifts"]
      },
      "UpdateShiftScheduleDto": { "type": "object", "properties": {} },
      "SwapShiftDto": { "type": "object", "properties": {} },
      "CreateShiftAttendanceDto": { "type": "object", "properties": {} },
      "ShiftAttendance": { "type": "object", "properties": {} },
      "UpdateShiftAttendanceDto": { "type": "object", "properties": {} },
      "CreatePaymentRuleDto": {
        "type": "object",
        "properties": {
          "shiftTypeId": {
            "type": "string",
            "description": "The ID of the shift type for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "roleId": {
            "type": "string",
            "description": "The ID of the role for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7"
          },
          "paymentType": {
            "type": "string",
            "description": "The type of payment (hourly, weekly, monthly, or per shift)",
            "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
            "example": "HOURLY"
          },
          "baseRate": {
            "type": "number",
            "description": "The base payment rate",
            "example": 25.5,
            "minimum": 0
          },
          "specialtyBonus": {
            "type": "number",
            "description": "Additional bonus for specialized skills (optional)",
            "example": 5,
            "minimum": 0
          },
          "experienceMultiplier": {
            "type": "number",
            "description": "Multiplier applied based on experience level (optional)",
            "example": 1.2,
            "minimum": 1
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule expires (optional)",
            "example": "2025-12-31T00:00:00.000Z"
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the organization this payment rule belongs to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa8"
          }
        },
        "required": [
          "shiftTypeId",
          "roleId",
          "paymentType",
          "baseRate",
          "effectiveDate",
          "organizationId"
        ]
      },
      "PaymentRuleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa9"
          },
          "shiftTypeId": {
            "type": "string",
            "description": "The ID of the shift type for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "roleId": {
            "type": "string",
            "description": "The ID of the role for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7"
          },
          "paymentType": {
            "type": "string",
            "description": "The type of payment",
            "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
            "example": "HOURLY"
          },
          "baseRate": {
            "type": "number",
            "description": "The base payment rate",
            "example": 25.5
          },
          "specialtyBonus": {
            "type": "number",
            "description": "Additional bonus for specialized skills",
            "example": 5
          },
          "experienceMultiplier": {
            "type": "number",
            "description": "Multiplier applied based on experience level",
            "example": 1.2
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule expires",
            "example": "2025-12-31T00:00:00.000Z",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "The ID of the organization this payment rule belongs to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa8"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the payment rule was created",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the payment rule was last updated",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "shiftType": {
            "type": "object",
            "description": "The related shift type details"
          },
          "role": {
            "type": "object",
            "description": "The related role details"
          }
        },
        "required": [
          "id",
          "shiftTypeId",
          "roleId",
          "paymentType",
          "baseRate",
          "specialtyBonus",
          "experienceMultiplier",
          "effectiveDate",
          "organizationId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdatePaymentRuleDto": {
        "type": "object",
        "properties": {
          "shiftTypeId": {
            "type": "string",
            "description": "The ID of the shift type for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "roleId": {
            "type": "string",
            "description": "The ID of the role for this payment rule",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7"
          },
          "paymentType": {
            "type": "string",
            "description": "The type of payment (hourly, weekly, monthly, or per shift)",
            "enum": ["HOURLY", "WEEKLY", "MONTHLY", "PER_SHIFT"],
            "example": "HOURLY"
          },
          "baseRate": {
            "type": "number",
            "description": "The base payment rate",
            "example": 25.5,
            "minimum": 0
          },
          "specialtyBonus": {
            "type": "number",
            "description": "Additional bonus for specialized skills",
            "example": 5,
            "minimum": 0
          },
          "experienceMultiplier": {
            "type": "number",
            "description": "Multiplier applied based on experience level",
            "example": 1.2,
            "minimum": 1
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this payment rule expires",
            "example": "2025-12-31T00:00:00.000Z",
            "nullable": true
          }
        }
      },
      "CreateShiftTypePremiumDto": {
        "type": "object",
        "properties": {
          "shiftTypeId": {
            "type": "string",
            "description": "The ID of the shift type this premium applies to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "compensationRateId": {
            "type": "string",
            "description": "The ID of the compensation rate this premium applies to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7"
          },
          "isPremiumPercentage": {
            "type": "boolean",
            "description": "Whether the premium is calculated as a percentage (true) or fixed amount (false)",
            "example": true
          },
          "premiumValue": {
            "type": "number",
            "description": "The premium value (percentage or fixed amount)",
            "example": 0.25,
            "minimum": 0
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this shift premium becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this shift premium expires (optional)",
            "example": "2025-12-31T00:00:00.000Z"
          }
        },
        "required": [
          "shiftTypeId",
          "compensationRateId",
          "isPremiumPercentage",
          "premiumValue",
          "effectiveDate"
        ]
      },
      "UpdateShiftTypePremiumDto": {
        "type": "object",
        "properties": {
          "isPremiumPercentage": {
            "type": "boolean",
            "description": "Whether the premium is calculated as a percentage (true) or fixed amount (false)",
            "example": true
          },
          "premiumValue": {
            "type": "number",
            "description": "The premium value (percentage or fixed amount)",
            "example": 0.25,
            "minimum": 0
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this shift premium becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this shift premium expires",
            "example": "2025-12-31T00:00:00.000Z",
            "nullable": true
          }
        }
      },
      "CreateStaffCompensationRateDto": {
        "type": "object",
        "properties": {
          "staffProfileId": {
            "type": "string",
            "description": "The ID of the staff profile this compensation applies to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "departmentId": {
            "type": "string",
            "description": "The ID of the department this compensation applies to",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa7"
          },
          "baseRate": {
            "type": "number",
            "description": "The base compensation rate amount",
            "example": 25.5,
            "minimum": 0
          },
          "paymentType": {
            "type": "string",
            "description": "The type of payment (hourly, weekly, or monthly)",
            "enum": ["HOURLY", "WEEKLY", "MONTHLY"],
            "example": "HOURLY"
          },
          "specialtyBonus": {
            "type": "number",
            "description": "Additional bonus for specialized skills (optional)",
            "example": 5,
            "minimum": 0
          },
          "experienceMultiplier": {
            "type": "number",
            "description": "Multiplier applied based on experience level (optional)",
            "example": 1.2,
            "minimum": 1
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this compensation rate becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this compensation rate expires (optional)",
            "example": "2025-12-31T00:00:00.000Z"
          }
        },
        "required": [
          "staffProfileId",
          "departmentId",
          "baseRate",
          "paymentType",
          "effectiveDate"
        ]
      },
      "UpdateStaffCompensationRateDto": {
        "type": "object",
        "properties": {
          "baseRate": {
            "type": "number",
            "description": "The base compensation rate amount",
            "example": 25.5,
            "minimum": 0
          },
          "paymentType": {
            "type": "string",
            "description": "The type of payment (hourly, weekly, or monthly)",
            "enum": ["HOURLY", "WEEKLY", "MONTHLY"],
            "example": "HOURLY"
          },
          "specialtyBonus": {
            "type": "number",
            "description": "Additional bonus for specialized skills",
            "example": 5,
            "minimum": 0
          },
          "experienceMultiplier": {
            "type": "number",
            "description": "Multiplier applied based on experience level",
            "example": 1.2,
            "minimum": 1
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this compensation rate becomes effective",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "description": "The date when this compensation rate expires",
            "example": "2025-12-31T00:00:00.000Z",
            "nullable": true
          }
        }
      }
    }
  }
}
