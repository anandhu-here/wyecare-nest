import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema } from 'mongoose';

export type NotificationHistoryDocument = NotificationHistory & Document;

@Schema({ timestamps: true })
export class NotificationHistory {
  @Prop({
    type: MongooseSchema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true,
  })
  userId!: MongooseSchema.Types.ObjectId;

  @Prop({ required: true })
  title!: string;

  @Prop({ required: true })
  body!: string;

  @Prop({ type: Object, default: {} })
  data!: Record<string, any>;

  @Prop({ required: true })
  sentAt!: Date;

  @Prop({ default: false, index: true })
  isRead!: boolean;

  @Prop()
  readAt?: Date;

  @Prop({
    type: String,
    enum: ['info', 'warning', 'error', 'success'],
    default: 'info',
  })
  type?: string;

  @Prop({ type: String, enum: ['low', 'medium', 'high'], default: 'medium' })
  priority?: string;

  @Prop()
  expiresAt?: Date;

  // Auto-generated by timestamps
  createdAt?: Date;
  updatedAt?: Date;
}

export const NotificationHistorySchema =
  SchemaFactory.createForClass(NotificationHistory);

// Create TTL index to automatically expire old notifications
NotificationHistorySchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// Create index for efficient queries
NotificationHistorySchema.index({ userId: 1, isRead: 1, createdAt: -1 });
